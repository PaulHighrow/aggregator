{"version":3,"file":"static/js/Streams page.74c34793.chunk.js","mappings":"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","sources":["components/Stream/StreamNav/StreamNav.styled.js","components/Stream/StreamNav/StreamNav.jsx","pages/Streams/Streams.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StreamNavigationBox = styled.section`\n  height: 100%;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  padding: 20px;\n  gap: 15px;\n\n  @media screen and (min-width: 768px) {\n    padding: 30px;\n    gap: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    padding: 40px;\n    gap: 25px;\n  }\n`;\n\nexport const StreamNavigation = styled.div`\n  display: flex;\n  flex-direction: column;\n  \n  font-family: var(--streams-font-family);\n  gap: 15px;\n\n  @media screen and (min-width: 768px) {\n    gap: 20px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    gap: 25px;\n  }\n`;\n\nexport const StreamNavTitle = styled.h2`\n  text-align: center;\n  color: var(--main-color);\n  font-size: 32px;\n  font-weight: 600;\n  letter-spacing: 1.8px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 36px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    font-size: 40px;\n  }\n`;\n\nexport const StreamNavDescription = styled.p`\n  text-align: center;\n  color: var(--main-color);\n\n  font-size: 22px;\n  font-weight: 500;\n\n  @media screen and (min-width: 768px) {\n    font-size: 24px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    font-size: 26px;\n  }\n`;\n\nexport const StreamNavList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  gap: 20px;\n`;\n\nexport const StreamNavItem = styled.li`\n  min-width: 56px;\n  width: max-content;\n\n  @media screen and (min-width: 768px) {\n    min-width: 69px;\n  }\n  @media screen and (min-width: 1280px) {\n    min-width: 80px;\n  }\n`;\n\nexport const StreamNavLink = styled(Link)`\n  display: block;\n\n  cursor: pointer;\n  text-decoration: none;\n  text-align: center;\n  padding: 8px;\n\n  font-size: 32px;\n  font-weight: 600;\n  letter-spacing: 1.8px;\n\n  color: var(--accent-color);\n  border: 2px solid var(--main-transparent-color);\n  border-radius: 50%;\n\n  transition: color var(--animation-global),\n    background-color var(--animation-global);\n\n  @media screen and (min-width: 768px) {\n    padding: 12px;\n    font-size: 36px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    padding: 16px;\n    font-size: 40px;\n  }\n\n  &:hover,\n  &:focus {\n    color: var(--main-color);\n    background-color: var(--accent-transparent-color);\n  }\n`;\n","import {\n  StreamNavDescription,\n  StreamNavItem,\n  StreamNavLink,\n  StreamNavList,\n  StreamNavTitle,\n  StreamNavigation,\n  StreamNavigationBox,\n} from './StreamNav.styled';\n\nexport const StreamNav = () => {\n  return (\n    <>\n      <StreamNavigationBox>\n        <StreamNavigation>\n          <StreamNavTitle>Вітаємо на сторінці онлайн-уроків!</StreamNavTitle>\n          <StreamNavDescription>\n            Щоб знайти потрібну трансляцію, просто оберіть рівень або мову:\n          </StreamNavDescription>\n          <StreamNavList>\n            {/* <StreamNavItem>\n              <StreamNavLink to={'/streams/a0'}> A0</StreamNavLink>\n            </StreamNavItem> */}\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/a1'}>A1</StreamNavLink>\n            </StreamNavItem>\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/a2'}>A2</StreamNavLink>\n            </StreamNavItem>\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/b1'}>B1</StreamNavLink>\n            </StreamNavItem>\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/b2'}>B2</StreamNavLink>\n            </StreamNavItem>\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/deutsch'}>DE A1</StreamNavLink>\n            </StreamNavItem>\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/deutscha2'}>DE A2</StreamNavLink>\n            </StreamNavItem>\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/polski'}>PL A1</StreamNavLink>\n            </StreamNavItem>\n            <StreamNavItem>\n              <StreamNavLink to={'/streams/polskia2'}>PL A2</StreamNavLink>\n            </StreamNavItem>\n          </StreamNavList>\n        </StreamNavigation>\n        {/* <Schedule /> */}\n      </StreamNavigationBox>\n    </>\n  );\n};\n","import axios from 'axios';\nimport { StreamsBackgroundWrapper } from 'components/BackgroundWrapper/BackgroundWrappers';\nimport { Label } from 'components/LeadForm/LeadForm.styled';\nimport { Loader } from 'components/SharedLayout/Loaders/Loader';\nimport { LoaderWrapper } from 'components/SharedLayout/Loaders/Loader.styled';\nimport { StreamNav } from 'components/Stream/StreamNav/StreamNav';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useLayoutEffect, useState } from 'react';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport * as yup from 'yup';\nimport {\n  LoginInput,\n  LoginInputNote,\n  LoginLogo,\n  StreamAuthText,\n  StreamAuthTextHello,\n} from '../../components/Stream/Stream.styled';\nimport { AdminFormBtn, LoginForm } from './AdminPanel/AdminPanel.styled';\n\naxios.defaults.baseURL = 'https://aggregator-server.onrender.com';\n\nconst setAuthToken = token => {\n  axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n};\n\nconst Streams = () => {\n  let location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [links, setLinks] = useState({});\n  const [currentUser, setCurrentUser] = useState({});\n  const [isUserLogged, setIsUserLogged] = useState(false);\n\n  const room = location.pathname;\n\n  const wakeupRequest = async () => {\n    try {\n      const wake = await axios.get('/');\n      console.log(wake.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const detectUser = async () => {\n    try {\n      let ip;\n      try {\n        ip = (await axios.get('https://jsonip.com/')).data.ip;\n        console.log(ip);\n      } catch (error) {\n        console.log(error);\n      }\n      const id = localStorage.getItem('userID');\n      const user = await axios.get(`https://ap-chat.onrender.com/users/${id}`);\n      console.log(user.data, 'detect');\n      setCurrentUser(\n        currentUser =>\n          (currentUser = user.data || {\n            username: 'User Is Not Logged In',\n            isBanned: false,\n            userIP: ip || 'user has disabled ip tracker',\n          })\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const initialLoginValues = {\n    mail: '',\n    password: '',\n  };\n\n  const loginSchema = yup.object().shape({\n    mail: yup\n      .string()\n      .required('Вкажіть пошту, за якою ви зареєстровані на нашій платформі!'),\n    password: yup\n      .string()\n      .required(\n        'Введіть пароль, який ви використовуєте для входу на нашу платформу!'\n      ),\n  });\n\n  const handleLoginSubmit = async (values, { resetForm }) => {\n    values.mail = values.mail.toLowerCase().trim().trimStart();\n    values.password = values.password.trim().trimStart();\n    try {\n      const response = await axios.post('/users/login', values);\n      console.log(values);\n      console.log(response);\n      setAuthToken(response.data.token);\n      setIsUserLogged(isLogged => (isLogged = true));\n      setCurrentUser(currentUser => (currentUser = response.data.user));\n      localStorage.setItem('userID', nanoid(8));\n      localStorage.setItem('mail', values.mail);\n      localStorage.setItem('userName', response.data.user.name);\n      resetForm();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useLayoutEffect(() => {\n    wakeupRequest();\n\n    const getLinksRequest = async () => {\n      try {\n        setIsLoading(isLoading => (isLoading = true));\n        setLinks((await axios.get('/links')).data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(isLoading => (isLoading = false));\n      }\n    };\n    getLinksRequest();\n\n    const refreshToken = async () => {\n      console.log('token refresher');\n      try {\n        const res = await axios.post(\n          'https://aggregator-server.onrender.com/users/refresh',\n          { mail: localStorage.getItem('mail') }\n        );\n        setIsUserLogged(isLogged => (isLogged = true));\n        const id = nanoid(8);\n        if (!localStorage.getItem('userID')) {\n          localStorage.setItem('userID', id);\n        }\n        localStorage.setItem('userName', res.data.user.name);\n        console.log(res);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    refreshToken();\n  }, []);\n\n  useEffect(() => {\n    detectUser();\n  }, [isLoading]);\n\n  return (\n    <>\n      <StreamsBackgroundWrapper>\n        {!isUserLogged && !location.pathname.includes('admin-panel') && !location.pathname.includes('-chat') ? (\n          <Formik\n            initialValues={initialLoginValues}\n            onSubmit={handleLoginSubmit}\n            validationSchema={loginSchema}\n          >\n            <LoginForm>\n              <LoginLogo />\n              <StreamAuthText>\n                <StreamAuthTextHello>Привіт!</StreamAuthTextHello>\n                Ця сторінка недоступна для неавторизованих користувачів. Але,\n                якщо ви маєте доступ до нашої платформи, то й до цієї сторінки\n                теж. Введіть дані, які ви використовуєте для входу на платформу.\n              </StreamAuthText>\n              <Label>\n                <LoginInput type=\"text\" name=\"mail\" placeholder=\"Login\" />\n                <LoginInputNote component=\"p\" name=\"mail\" type=\"email\" />\n              </Label>\n              <Label>\n                <LoginInput\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                />\n                <LoginInputNote component=\"p\" name=\"password\" />\n              </Label>\n              <AdminFormBtn type=\"submit\">Увійти</AdminFormBtn>\n            </LoginForm>\n          </Formik>\n        ) : location.pathname === '/streams' ||\n          location.pathname === '/streams/' ? (\n          <StreamNav />\n        ) : (\n          <Outlet context={[links, isLoading, currentUser, room]} />\n        )}\n\n        {isLoading && (\n          <LoaderWrapper>\n            <Loader />\n          </LoaderWrapper>\n        )}\n      </StreamsBackgroundWrapper>\n    </>\n  );\n};\n\nexport default Streams;\n"],"names":["StreamNavigationBox","styled","_templateObject","_taggedTemplateLiteral","StreamNavigation","_templateObject2","StreamNavTitle","_templateObject3","StreamNavDescription","_templateObject4","StreamNavList","_templateObject5","StreamNavItem","_templateObject6","StreamNavLink","Link","_templateObject7","StreamNav","_jsx","_Fragment","children","_jsxs","to","axios","Streams","location","useLocation","isLoading","setIsLoading","useState","links","setLinks","currentUser","setCurrentUser","isUserLogged","setIsUserLogged","room","pathname","loginSchema","yup","shape","mail","required","password","useLayoutEffect","async","wake","console","log","data","error","wakeupRequest","getLinksRequest","res","localStorage","getItem","isLogged","id","nanoid","setItem","user","name","refreshToken","useEffect","ip","concat","username","isBanned","userIP","detectUser","StreamsBackgroundWrapper","includes","Outlet","context","Formik","initialValues","onSubmit","values","_ref","resetForm","toLowerCase","trim","trimStart","response","token","validationSchema","LoginForm","LoginLogo","StreamAuthText","StreamAuthTextHello","Label","LoginInput","type","placeholder","LoginInputNote","component","AdminFormBtn","LoaderWrapper","Loader"],"sourceRoot":""}