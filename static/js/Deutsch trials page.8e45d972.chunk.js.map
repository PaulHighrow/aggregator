{"version":3,"file":"static/js/Deutsch trials page.8e45d972.chunk.js","mappings":"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","sources":["pages/Trials/StreamTrialDeutsch.jsx"],"sourcesContent":["import useSize from '@react-hook/size';\nimport axios from 'axios';\nimport { StreamsBackgroundWrapper } from 'components/BackgroundWrapper/BackgroundWrappers';\nimport { Loader } from 'components/SharedLayout/Loaders/Loader';\nimport { LoaderWrapper } from 'components/SharedLayout/Loaders/Loader.styled';\nimport { Kahoots } from 'components/Stream/Kahoots/Kahoots';\nimport { Support } from 'components/Stream/Support/Support';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { io } from 'socket.io-client';\nimport { Chat } from 'utils/Chat/Chat';\nimport {\n  ChatLoginButton,\n  ChatLoginForm,\n  ChatLoginHeader,\n  ChatLoginInput,\n  ChatLoginLabel,\n} from 'utils/Chat/Chat.styled';\nimport {\n  ButtonBox,\n  ChatBox,\n  ChatBtn,\n  ChatLogo,\n  KahootBtn,\n  KahootLogo,\n  MoldingNoClick,\n  MoldingNoClickSecondary,\n  StreamPlaceHolder,\n  StreamPlaceHolderText,\n  StreamSection,\n  SupportArrow,\n  SupportBtn,\n  SupportLogo,\n  SupportMarkerLeft,\n  SupportMarkerRight,\n  SupportPointer,\n  VideoBox,\n} from '../../components/Stream/Stream.styled';\n\naxios.defaults.baseURL = 'https://aggregator-server.onrender.com';\n\nconst StreamTrialDeutsch = () => {\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [isKahootOpen, setIsKahootOpen] = useState(false);\n  const [isSupportOpen, setIsSupportOpen] = useState(false);\n  const [isOpenedLast, setIsOpenedLast] = useState('');\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [animatedID, setAnimationID] = useState('');\n  const chatEl = useRef();\n  // eslint-disable-next-line\n  const [chatWidth, chatHeight] = useSize(chatEl);\n  const [width, height] = useSize(document.body);\n  const [isLoading, setIsLoading] = useState(false);\n  const [links, setLinks] = useState({});\n  const [userName, setUserName] = useState('');\n  // eslint-disable-next-line\n  const [userID, setUserID] = useState('');\n  const [isLoggedToChat, setIsLoggedToChat] = useState(false);\n  const [messages, setMessages] = useState([]);\n\n  const wakeupRequest = async () => {\n    try {\n      const wake = await axios.get('/');\n      console.log(wake.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useLayoutEffect(() => {\n    wakeupRequest();\n\n    const getLinksRequest = async () => {\n      try {\n        setIsLoading(isLoading => (isLoading = true));\n        setLinks((await axios.get('/links')).data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(isLoading => (isLoading = false));\n      }\n    };\n    getLinksRequest();\n  }, []);\n\n  const toggleKahoot = e => {\n    setIsKahootOpen(isKahootOpen => !isKahootOpen);\n    isChatOpen || isSupportOpen\n      ? setIsOpenedLast(isOpenedLast => 'kahoot')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const toggleChat = () => {\n    setIsChatOpen(isChatOpen => !isChatOpen);\n    isKahootOpen || isSupportOpen\n      ? setIsOpenedLast(isOpenedLast => 'chat')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const toggleSupport = () => {\n    setIsSupportOpen(isSupportOpen => !isSupportOpen);\n    setAnimationID('');\n    isKahootOpen || isChatOpen\n      ? setIsOpenedLast(isOpenedLast => 'support')\n      : setIsOpenedLast(isOpenedLast => '');\n  };\n  const handleSupportClick = data_id => {\n    setAnimationID(id => (id = data_id));\n    if (!isAnimated) {\n      setIsAnimated(isAnimated => !isAnimated);\n    }\n  };\n\n  const videoBoxWidth =\n    chatWidth === 0 && width > height ? width - 300 : width - chatWidth;\n\n  const checkLogin = e => {\n    const name = localStorage.getItem('userName');\n    const id = localStorage.getItem('userID');\n\n    if (id && name) {\n      setIsLoggedToChat(isLogged => (isLogged = true));\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const idGen = nanoid(8);\n    setUserID(id => (id = idGen));\n    localStorage.setItem('userName', userName.trim());\n    localStorage.setItem('userID', idGen);\n    setIsLoggedToChat(isLogged => !isLogged);\n  };\n\n  const socketRef = useRef(null);\n\n  useEffect(() => {\n    document.title = 'Deutsch Trial | AP Education';\n\n    socketRef.current = io('https://ap-chat.onrender.com/');\n    checkLogin();\n\n    socketRef.current.on('connected', (connected, handshake) => {\n      console.log(connected);\n      console.log(handshake);\n    });\n\n    const getMessages = async () => {\n      try {\n        const dbMessages = await axios.get(\n          'https://ap-chat.onrender.com/messages'\n        );\n        const todayMessages = dbMessages.data.filter(\n          message =>\n            new Date(message.createdAt).getDate() === new Date().getDate()\n        );\n        setMessages(messages => (messages = todayMessages));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMessages();\n\n    socketRef.current.on('message', async data => {\n      const updateMessages = async () => {\n        try {\n          await axios.post('https://ap-chat.onrender.com/messages', data);\n          setMessages(messages => (messages = [...messages, data]));\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      await updateMessages();\n    });\n\n    socketRef.current.on('message:get', async data => {\n      setMessages(messages => (messages = [...messages, data]));\n    });\n\n    return () => {\n      socketRef.current.off('connected');\n      socketRef.current.off('message');\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  return (\n    <>\n      {(links.trials_de === undefined || links.trials_de[0] < 10) &&\n      !isLoading ? (\n        <StreamPlaceHolder>\n          <StreamPlaceHolderText>\n            Поки що трансляції тут немає! <br />\n            Перевірте, чи правильно ви вказали адресу сторінки або спробуйте\n            пізніше.\n          </StreamPlaceHolderText>\n        </StreamPlaceHolder>\n      ) : (\n        <>\n          <StreamSection\n            style={{\n              width:\n                isChatOpen && width > height ? `${videoBoxWidth}px` : '100%',\n            }}\n          >\n            <StreamsBackgroundWrapper>\n              {isLoading && (\n                <LoaderWrapper>\n                  <Loader />\n                </LoaderWrapper>\n              )}\n\n              <VideoBox>\n                <MoldingNoClick />\n                <MoldingNoClickSecondary />\n                <SupportMarkerLeft\n                  className={\n                    (isAnimated && animatedID === 'sound') ||\n                    (isAnimated && animatedID === 'live')\n                      ? 'animated'\n                      : ''\n                  }\n                >\n                  <SupportArrow\n                    className={\n                      (isAnimated && animatedID === 'sound') ||\n                      (isAnimated && animatedID === 'live')\n                        ? 'animated'\n                        : ''\n                    }\n                  />\n                </SupportMarkerLeft>\n                <SupportMarkerRight\n                  className={\n                    isAnimated && animatedID === 'quality' ? 'animated' : ''\n                  }\n                >\n                  <SupportPointer\n                    className={\n                      isAnimated && animatedID === 'quality' ? 'animated' : ''\n                    }\n                  />\n                </SupportMarkerRight>\n                <ReactPlayer\n                  playing={true}\n                  muted={true}\n                  controls={true}\n                  config={{\n                    youtube: {\n                      playerVars: { rel: 0 },\n                    },\n                  }}\n                  style={{\n                    display: 'block',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                  }}\n                  width=\"100%\"\n                  height=\"100vh\"\n                  url={links.trials_de}\n                />\n              </VideoBox>\n\n              <ButtonBox>\n                <KahootBtn\n                  onClick={toggleKahoot}\n                  className={\n                    isAnimated && animatedID === 'kahoot_open' ? 'animated' : ''\n                  }\n                >\n                  <KahootLogo />\n                </KahootBtn>\n\n                <ChatBtn\n                  onClick={toggleChat}\n                  className={\n                    isAnimated && animatedID === 'chat_open' ? 'animated' : ''\n                  }\n                >\n                  <ChatLogo />\n                </ChatBtn>\n\n                <SupportBtn onClick={toggleSupport}>\n                  <SupportLogo />\n                </SupportBtn>\n              </ButtonBox>\n              {links.trials_de &&\n              !links.trials_de.includes('youtube') &&\n              !links.trials_de.includes('youtu.be')\n                ? window.location.replace(links.trials_de)\n                : null}\n              {height > width && (\n                <ChatBox\n                  ref={chatEl}\n                  className={isChatOpen ? 'shown' : 'hidden'}\n                  style={\n                    isOpenedLast === 'chat' ? { zIndex: '2' } : { zIndex: '1' }\n                  }\n                >\n                  {!isLoggedToChat ? (\n                    <ChatLoginForm onSubmit={handleSubmit}>\n                      <ChatLoginHeader>AP Open Chat</ChatLoginHeader>\n                      <ChatLoginLabel htmlFor=\"username\">\n                        Введіть ваше ім'я та прізвище повністю\n                      </ChatLoginLabel>\n                      <ChatLoginInput\n                        type=\"text\"\n                        minLength={3}\n                        name=\"username\"\n                        id=\"username\"\n                        value={userName}\n                        onChange={e => setUserName(e.target.value)}\n                      />\n                      <ChatLoginButton>Готово!</ChatLoginButton>\n                    </ChatLoginForm>\n                  ) : (\n                    <Chat\n                      socket={socketRef.current}\n                      messages={messages}\n                      isChatOpen={isChatOpen}\n                    />\n                  )}\n                </ChatBox>\n              )}\n\n              <Kahoots\n                sectionWidth={width}\n                sectionHeight={height}\n                isKahootOpen={isKahootOpen}\n                isChatOpen={isChatOpen}\n                isOpenedLast={isOpenedLast}\n              />\n\n              <Support\n                sectionWidth={width}\n                isSupportOpen={isSupportOpen}\n                isOpenedLast={isOpenedLast}\n                handleSupport={handleSupportClick}\n                openKahoot={toggleKahoot}\n                isKahootOpen={isKahootOpen}\n              />\n            </StreamsBackgroundWrapper>\n          </StreamSection>\n          {width >= height && (\n            <ChatBox\n              ref={chatEl}\n              className={isChatOpen ? 'shown' : 'hidden'}\n              style={\n                isOpenedLast === 'chat' ? { zIndex: '2' } : { zIndex: '1' }\n              }\n            >\n              {!isLoggedToChat ? (\n                <ChatLoginForm onSubmit={handleSubmit}>\n                  <ChatLoginHeader>AP Open Chat</ChatLoginHeader>\n                  <ChatLoginLabel htmlFor=\"username\">\n                    Введіть ваше ім'я та прізвище повністю\n                  </ChatLoginLabel>\n                  <ChatLoginInput\n                    type=\"text\"\n                    minLength={3}\n                    name=\"username\"\n                    id=\"username\"\n                    value={userName}\n                    onChange={e => setUserName(e.target.value)}\n                  />\n                  <ChatLoginButton>Готово!</ChatLoginButton>\n                </ChatLoginForm>\n              ) : (\n                <Chat\n                  socket={socketRef.current}\n                  messages={messages}\n                  isChatOpen={isChatOpen}\n                />\n              )}\n            </ChatBox>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default StreamTrialDeutsch;\n"],"names":["axios","StreamTrialDeutsch","isChatOpen","setIsChatOpen","useState","isKahootOpen","setIsKahootOpen","isSupportOpen","setIsSupportOpen","isOpenedLast","setIsOpenedLast","isAnimated","setIsAnimated","animatedID","setAnimationID","chatEl","useRef","chatWidth","chatHeight","useSize","width","height","document","body","isLoading","setIsLoading","links","setLinks","userName","setUserName","userID","setUserID","isLoggedToChat","setIsLoggedToChat","messages","setMessages","useLayoutEffect","async","wake","console","log","data","error","wakeupRequest","getLinksRequest","toggleKahoot","e","videoBoxWidth","handleSubmit","preventDefault","idGen","nanoid","id","localStorage","setItem","trim","isLogged","socketRef","useEffect","title","current","io","name","getItem","checkLogin","on","connected","handshake","todayMessages","filter","message","Date","createdAt","getDate","getMessages","updateMessages","off","disconnect","_jsx","_Fragment","children","undefined","trials_de","StreamPlaceHolder","_jsxs","StreamPlaceHolderText","StreamSection","style","concat","StreamsBackgroundWrapper","LoaderWrapper","Loader","VideoBox","MoldingNoClick","MoldingNoClickSecondary","SupportMarkerLeft","className","SupportArrow","SupportMarkerRight","SupportPointer","ReactPlayer","playing","muted","controls","config","youtube","playerVars","rel","display","position","top","left","url","ButtonBox","KahootBtn","onClick","KahootLogo","ChatBtn","toggleChat","ChatLogo","SupportBtn","toggleSupport","SupportLogo","includes","window","location","replace","ChatBox","ref","zIndex","Chat","socket","ChatLoginForm","onSubmit","ChatLoginHeader","ChatLoginLabel","htmlFor","ChatLoginInput","type","minLength","value","onChange","target","ChatLoginButton","Kahoots","sectionWidth","sectionHeight","Support","handleSupport","data_id","openKahoot"],"sourceRoot":""}