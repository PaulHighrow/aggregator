import axios from 'axios';
import { useLayoutEffect, useState } from 'react';
import toast from 'react-hot-toast';
import { useInView } from 'react-intersection-observer';
import { useLocation } from 'react-router-dom';
import {
  SupportClipBoardAdd,
  SupportClipBoardCopy,
  SupportKahootPickerIcon,
} from '../Support/Support.styled';
import {
  ClipBoardAdd,
  ClipBoardBtn,
  ClipBoardCopy,
  ClipBoardFormDismissBtn,
  ClipBoardFormText,
  ClipBoardInput,
  ClipBoardInputForm,
  ClipBoardNotification,
  ClipBoardSubmitBtn,
  DismissIcon,
  KahootBackground,
  KahootBox,
  KahootDisclaimerBackground,
  KahootDisclaimerBox,
  KahootDisclaimerItem,
  KahootDisclaimerList,
  KahootDisclaimerText,
  KahootExitFullScreenIcon,
  KahootFullScreenBtn,
  KahootFullScreenIcon,
  KahootNumbersBtn,
  KahootNumbersHider,
  KahootPicker,
  KahootPickerBtn,
} from './Kahoots.styled';

export const Kahoots = ({
  sectionWidth,
  sectionHeight,
  isKahootOpen,
  isChatOpen,
  isOpenedLast,
}) => {
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [isPickerOpen, setIsPickerOpen] = useState(false);
  const [isAnimated, setIsAnimated] = useState(true);
  const [username, setUsername] = useState(
    localStorage.getItem('userName') || ''
  );
  const [kahoots, setKahoots] = useState({});
  const [activeKahoot, setActiveKahoot] = useState(0);

  let location = useLocation();

  const { ref, inView } = useInView({
    triggerOnce: true,
    delay: 1000,
  });

  const trialsSwitch = path => {
    switch (path) {
      case 'pilot':
        return 'deutsch';
      case 'test1':
        return 'test';
      case 'trial-en':
        return 'trials';
      case 'trial-de':
        return 'trials_de';
      case 'trial-pl':
        return 'trials_pl';
      case 'trial-kids':
        return 'trials_kids';
      default:
        break;
    }
  };

  const page = location.pathname.includes('streams-kids')
    ? location.pathname.match(/\/([^/]+)\/?$/)[1] + 'kids'
    : location.pathname.includes('trial') ||
      location.pathname.includes('pilot') ||
      location.pathname.includes('test1')
    ? trialsSwitch(location.pathname.match(/\/([^/]+)\/?$/)[1])
    : location.pathname.match(/\/([^/]+)\/?$/)[1];

  const kahootWidth = isFullScreen ? sectionWidth : (sectionWidth / 10) * 4;

  const getLinksForLocation = () => {
    const entries = [];
    Object.values(kahoots[page].links).map(entry => {
      entries.push(entry);
      return entries;
    });
    return entries;
  };

  const kahootLinksRefresher = async e => {
    if (e.target === e.currentTarget) {
      setKahoots((await axios.get('/kahoots')).data);
    }
  };

  const setKahootNumber = async e => {
    const kahootNumber = parseInt(e.currentTarget.innerText);
    setKahoots((await axios.get('/kahoots')).data);
    setActiveKahoot(kahootNumber);
  };

  useLayoutEffect(() => {
    const getLinksRequest = async () => {
      try {
        setKahoots((await axios.get('/kahoots')).data);
      } catch (error) {
        console.log(error);
      }
    };

    getLinksRequest();
  }, []);

  const toggleFullScreen = () => {
    setIsFullScreen(isFullScreen => (isFullScreen = !isFullScreen));
  };

  const toggleKahootPicker = () => {
    setIsAnimated(false);
    setIsPickerOpen(isOpen => (isOpen = !isOpen));
    setActiveKahoot(1);
  };

  const createNameInput = btn => {
    btn.disabled = true;
    toast(
      t => (
        <ClipBoardInputForm
          onSubmit={e => {
            e.preventDefault();
            toast.dismiss(t.id);
            setUsername(
              username => (username = localStorage.getItem('userName'))
            );
            btn.disabled = false;
            if (localStorage.getItem('userName')) {
              copyToClipboard(btn);
            }
          }}
        >
          <ClipBoardFormDismissBtn onClick={() => toast.dismiss(t.id)}>
            <DismissIcon />
          </ClipBoardFormDismissBtn>
          <ClipBoardFormText>
            –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –≤ —Ü–µ –ø–æ–ª–µ, —â–æ–± –≤–∞–º –Ω–µ –¥–æ–≤–æ–¥–∏–ª–æ—Å—è –≤–≤–æ–¥–∏—Ç–∏ –π–æ–≥–æ
            –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –ø—ñ–¥ —á–∞—Å —É—Ä–æ–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–æ–¥—å—Ç–µ –ø–æ–≤–Ω–µ —ñ–º'—è –±–µ–∑
            —Å–∫–æ—Ä–æ—á–µ–Ω—å, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—à—ñ –±–∞–ª–∏!
          </ClipBoardFormText>
          <ClipBoardInput
            placeholder="–Ü–º'—è"
            onChange={e => {
              localStorage.setItem('userName', e.target.value);
            }}
          />
          <ClipBoardSubmitBtn>–ó–±–µ—Ä–µ–≥—Ç–∏</ClipBoardSubmitBtn>
        </ClipBoardInputForm>
      ),
      { duration: Infinity }
    );
  };

  const copyToClipboard = btn => {
    navigator.clipboard.writeText(localStorage.getItem('userName'));
    toast.success(
      t => (
        <ClipBoardNotification>
          <ClipBoardFormText>
            <ClipBoardFormDismissBtn onClick={() => toast.dismiss(t.id)}>
              <DismissIcon />
            </ClipBoardFormDismissBtn>
            {`${localStorage.getItem('userName')}`}, –≤–∞—à–µ —ñ–º'—è –¥–æ–¥–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä
            –æ–±–º—ñ–Ω—É, –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç–∏ –π–æ–≥–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–ª–µ!
          </ClipBoardFormText>

          <ClipBoardFormText>
            –í–∏–ø–∞–¥–∫–æ–≤–æ –ø–æ–º–∏–ª–∏–ª–∏—Å—å? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ü—é –∫–Ω–æ–ø–∫—É:{' '}
            <ClipBoardSubmitBtn
              onClick={() => {
                toast.dismiss(t.id);
                createNameInput(btn);
              }}
            >
              –í–∏–ø—Ä–∞–≤–∏—Ç–∏
            </ClipBoardSubmitBtn>
          </ClipBoardFormText>
        </ClipBoardNotification>
      ),
      { duration: 3000 }
    );
  };

  const handleUsernameBtn = e => {
    const btn = e.currentTarget;
    username ? copyToClipboard(btn) : createNameInput(btn);
  };

  return (
    <>
      {Object.keys(kahoots).length && (
        <KahootBox
          ref={ref}
          width={isChatOpen ? kahootWidth - 300 : kahootWidth}
          height={sectionHeight}
          className={isKahootOpen ? 'shown' : 'hidden'}
          style={isOpenedLast === 'kahoot' ? { zIndex: '3' } : { zIndex: '1' }}
          onTransitionEnd={kahootLinksRefresher}
        >
          <KahootNumbersHider
            onClick={toggleKahootPicker}
            className={inView && isAnimated ? 'animated' : ''}
            tabIndex={-1}
          >
            <KahootPickerBtn />
          </KahootNumbersHider>
          <KahootPicker className={isPickerOpen ? 'shown' : 'hidden'}>
            {Object.values(kahoots[page].links).map((link, i) => (
              <KahootNumbersBtn
                key={i}
                onClick={setKahootNumber}
                className={activeKahoot === i + 1 ? 'active' : ''}
                tabIndex={-1}
              >
                {i + 1}
              </KahootNumbersBtn>
            ))}
          </KahootPicker>
          {activeKahoot ? (
            getLinksForLocation().map(
              (link, i) =>
                activeKahoot === i + 1 && (
                  <KahootBackground key={i}>
                    <iframe
                      id="kahoot-window"
                      title="kahoot-pin"
                      src={link}
                      width={
                        !isChatOpen
                          ? kahootWidth
                          : isFullScreen
                          ? kahootWidth - 300
                          : kahootWidth
                      }
                      height={sectionHeight}
                    ></iframe>
                    <KahootFullScreenBtn onClick={toggleFullScreen}>
                      {isFullScreen ? (
                        <KahootExitFullScreenIcon />
                      ) : (
                        <KahootFullScreenIcon />
                      )}
                    </KahootFullScreenBtn>
                    <ClipBoardBtn onClick={handleUsernameBtn}>
                      {username ? <ClipBoardCopy /> : <ClipBoardAdd />}
                    </ClipBoardBtn>
                  </KahootBackground>
                )
            )
          ) : (
            <KahootDisclaimerBackground
              style={
                !isChatOpen
                  ? { width: `${kahootWidth}px` }
                  : isFullScreen
                  ? { width: `${kahootWidth - 300}px` }
                  : { width: `${kahootWidth}px` }
              }
            >
              <KahootDisclaimerBox>
                <KahootDisclaimerText>
                  –ü—Ä–∏–≤—ñ—Ç! –¶–µ –≤—ñ–∫–Ω–æ –ö–∞—Ö—É—Ç—ñ–≤. –ú–∏ –ø–æ—Å—Ç—ñ–π–Ω–æ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
                  —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –Ω–∞—à–æ–≥–æ —Å–∞–π—Ç—É, —â–æ–± –≤–∞—à—ñ –∑–∞–Ω—è—Ç—Ç—è –∑–∞–ª–∏—à–∞–ª–∏—Å—è –¥–ª—è –≤–∞—Å
                  –ø—Ä–∏—î–º–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º, —Ç–æ–º—É –≤–Ω–µ—Å–ª–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞–∂–ª–∏–≤–∏—Ö –∑–º—ñ–Ω:
                </KahootDisclaimerText>
                <KahootDisclaimerList>
                  <KahootDisclaimerItem>
                    <KahootDisclaimerText>
                      –í–≤–æ–¥–∏—Ç–∏ –∫–æ–¥ –ö–∞—Ö—É—Ç—É —Ç–µ–ø–µ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–¥–∂–µ –º–∏ –≤–∂–µ –≤–≤–µ–ª–∏
                      –π–æ–≥–æ –∑–∞ –≤–∞—Å. –ü—Ä–æ—Å—Ç–æ —Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É{' '}
                      <SupportKahootPickerIcon /> —É –ø—Ä–∞–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç–∫—É
                      —Ü—å–æ–≥–æ –≤—ñ–∫–Ω–∞ —ñ –æ–±–∏—Ä–∞–π—Ç–µ –Ω–æ–º–µ—Ä –ö–∞—Ö—É—Ç—É. –ü–æ—á–Ω—ñ—Ç—å –∑ –ø–µ—Ä—à–æ–≥–æ. üòâ
                    </KahootDisclaimerText>
                  </KahootDisclaimerItem>
                  <KahootDisclaimerItem>
                    <KahootDisclaimerText>
                      –Ü–º'—è –≤–≤–æ–¥–∏—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É —Ç–µ–ø–µ—Ä —Ç–µ–∂ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ.
                      –¢–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <SupportClipBoardAdd /> —Ç–∞ –≤–≤–æ–¥—å—Ç–µ –≤
                      –Ω–µ–≤–µ–ª–∏—á–∫–µ –≤—ñ–∫–æ–Ω—Ü–µ –≤–∞—à–µ —ñ–º'—è (–Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø—Ä–æ –Ω–∞—à—ñ
                      —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó). –í–∏ –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç–∏ —Å–≤–æ—î —ñ–º'—è –ø–æ–≤–Ω—ñ—Å—Ç—é
                      (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π), –ö–∞—Ö—É—Ç –æ–±—Ä—ñ–∂–µ –∑–∞–π–≤—ñ
                      –ª—ñ—Ç–µ—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (–≤–∏–π–¥–µ: –í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω). –ö–æ–ª–∏ –≤–≤–µ–¥–µ—Ç–µ,
                      –∫–ª—ñ–∫–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ó–±–µ—Ä–µ–≥—Ç–∏" —ñ –≤–∞—à–µ —ñ–º'—è –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è —É –±—É—Ñ–µ—Ä
                      –æ–±–º—ñ–Ω—É, –∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ —Ç–∞–∫:{' '}
                      <SupportClipBoardCopy />.
                    </KahootDisclaimerText>
                  </KahootDisclaimerItem>{' '}
                  <KahootDisclaimerItem>
                    <KahootDisclaimerText>
                      –¢–µ–ø–µ—Ä –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ —Ü—é –∫–Ω–æ–ø–∫—É –≤–∏ –∑–º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ –∫–æ–ø—ñ—é–≤–∞—Ç–∏
                      —Å–≤–æ—î —ñ–º'—è —ñ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è—Ç–∏ –π–æ–≥–æ —É –ø–æ–ª–µ –ö–∞—Ö—É—Ç—É. –Ø–∫—â–æ –≤–∏
                      –ø—Ä–∏–ø—É—Å—Ç–∏–ª–∏—Å—è –ø–æ–º–∏–ª–∫–∏, –≤–≤–æ–¥—è—á–∏ —Å–≤–æ—î —ñ–º'—è, –≤–∏ –º–æ–∂–µ—Ç–µ –≤
                      –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É <SupportClipBoardCopy />
                      , –∞ —É –≤—ñ–∫–æ–Ω—Ü—ñ, —â–æ –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è, –∫–Ω–æ–ø–∫—É "–í–∏–ø—Ä–∞–≤–∏—Ç–∏", –ø—ñ—Å–ª—è
                      —á–æ–≥–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∑–∞–Ω–æ–≤–æ.
                    </KahootDisclaimerText>
                  </KahootDisclaimerItem>
                </KahootDisclaimerList>
              </KahootDisclaimerBox>
              <KahootFullScreenBtn onClick={toggleFullScreen} tabIndex={-1}>
                {isFullScreen ? (
                  <KahootExitFullScreenIcon />
                ) : (
                  <KahootFullScreenIcon />
                )}
              </KahootFullScreenBtn>
              <ClipBoardBtn tabIndex={-1} onClick={e => handleUsernameBtn(e)}>
                {username ? <ClipBoardCopy /> : <ClipBoardAdd />}
              </ClipBoardBtn>
            </KahootDisclaimerBackground>
          )}
        </KahootBox>
      )}
    </>
  );
};
